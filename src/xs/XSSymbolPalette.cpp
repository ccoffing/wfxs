#include "XSSymbolPalette.h"

#include <assert.h>
#include <cstring>
#include <stdint.h>


static uint8_t const XSStaticSymbols[] =
{
    0x21, 0x00, 0x00, 0x00,
    0x23, 0x00, 0x00, 0x00,
    0x24, 0x00, 0x00, 0x00,
    0x25, 0x00, 0x00, 0x00,
    0x26, 0x00, 0x00, 0x00,
    0x2a, 0x00, 0x00, 0x00,
    0x2d, 0x00, 0x00, 0x00,
    0x30, 0x00, 0x00, 0x00,
    0x31, 0x00, 0x00, 0x00,
    0x32, 0x00, 0x00, 0x00,
    0x33, 0x00, 0x00, 0x00,
    0x34, 0x00, 0x00, 0x00,
    0x35, 0x00, 0x00, 0x00,
    0x36, 0x00, 0x00, 0x00,
    0x37, 0x00, 0x00, 0x00,
    0x38, 0x00, 0x00, 0x00,
    0x39, 0x00, 0x00, 0x00,
    0x3c, 0x00, 0x00, 0x00,
    0x3d, 0x00, 0x00, 0x00,
    0x3e, 0x00, 0x00, 0x00,
    0x3f, 0x00, 0x00, 0x00,
    0x40, 0x00, 0x00, 0x00,
    0x41, 0x00, 0x00, 0x00,
    0x42, 0x00, 0x00, 0x00,
    0x43, 0x00, 0x00, 0x00,
    0x44, 0x00, 0x00, 0x00,
    0x45, 0x00, 0x00, 0x00,
    0x46, 0x00, 0x00, 0x00,
    0x47, 0x00, 0x00, 0x00,
    0x48, 0x00, 0x00, 0x00,
    0x49, 0x00, 0x00, 0x00,
    0x4a, 0x00, 0x00, 0x00,
    0x4b, 0x00, 0x00, 0x00,
    0x4c, 0x00, 0x00, 0x00,
    0x4d, 0x00, 0x00, 0x00,
    0x4e, 0x00, 0x00, 0x00,
    0x4f, 0x00, 0x00, 0x00,
    0x50, 0x00, 0x00, 0x00,
    0x51, 0x00, 0x00, 0x00,
    0x52, 0x00, 0x00, 0x00,
    0x53, 0x00, 0x00, 0x00,
    0x54, 0x00, 0x00, 0x00,
    0x55, 0x00, 0x00, 0x00,
    0x56, 0x00, 0x00, 0x00,
    0x57, 0x00, 0x00, 0x00,
    0x58, 0x00, 0x00, 0x00,
    0x59, 0x00, 0x00, 0x00,
    0x5a, 0x00, 0x00, 0x00,
    0x5e, 0x00, 0x00, 0x00,
    0x61, 0x00, 0x00, 0x00,
    0x62, 0x00, 0x00, 0x00,
    0x63, 0x00, 0x00, 0x00,
    0x64, 0x00, 0x00, 0x00,
    0x65, 0x00, 0x00, 0x00,
    0x66, 0x00, 0x00, 0x00,
    0x67, 0x00, 0x00, 0x00,
    0x68, 0x00, 0x00, 0x00,
    0x69, 0x00, 0x00, 0x00,
    0x6a, 0x00, 0x00, 0x00,
    0x6b, 0x00, 0x00, 0x00,
    0x6c, 0x00, 0x00, 0x00,
    0x6d, 0x00, 0x00, 0x00,
    0x6e, 0x00, 0x00, 0x00,
    0x6f, 0x00, 0x00, 0x00,
    0x70, 0x00, 0x00, 0x00,
    0x71, 0x00, 0x00, 0x00,
    0x72, 0x00, 0x00, 0x00,
    0x73, 0x00, 0x00, 0x00,
    0x74, 0x00, 0x00, 0x00,
    0x75, 0x00, 0x00, 0x00,
    0x76, 0x00, 0x00, 0x00,
    0x77, 0x00, 0x00, 0x00,
    0x78, 0x00, 0x00, 0x00,
    0x79, 0x00, 0x00, 0x00,
    0x7a, 0x00, 0x00, 0x00,
    0x7e, 0x00, 0x00, 0x00,
    0xc2, 0xa2, 0x00, 0x00,
    0xc2, 0xa3, 0x00, 0x00,
    0xc2, 0xa5, 0x00, 0x00,
    0xc2, 0xab, 0x00, 0x00,
    0xc2, 0xa9, 0x00, 0x00,  // copyright
    0xc2, 0xb5, 0x00, 0x00,
    0xc3, 0xb7, 0x00, 0x00,
    0xc2, 0x86, 0x90, 0x00,
    0xc2, 0x86, 0x91, 0x00,
    0xc2, 0x86, 0x92, 0x00,
    0xc2, 0x86, 0x93, 0x00,
    0xc2, 0x88, 0x86, 0x00,
    0xc2, 0x88, 0x87, 0x00,
    0xc2, 0x88, 0x91, 0x00,
    0xc2, 0x88, 0x9a, 0x00,
    0xc2, 0x88, 0x9e, 0x00,
    0xc2, 0x88, 0xab, 0x00,
    0xc2, 0x88, 0xae, 0x00,
    0xc2, 0x88, 0xb4, 0x00,
    0xc2, 0x88, 0xb6, 0x00,
    0xc2, 0x88, 0xb7, 0x00,
    0xc2, 0x8a, 0x95, 0x00,
    0xc2, 0x8a, 0x96, 0x00,
    0xc2, 0x8a, 0x97, 0x00,
    0xc2, 0x8a, 0x98, 0x00,
    0xc2, 0x8a, 0x99, 0x00,
    0xc2, 0x8a, 0x9a, 0x00,
    0xc2, 0x8a, 0x9b, 0x00,
    0xc2, 0x8a, 0x9c, 0x00,
    0xc2, 0x8a, 0x9d, 0x00,
    0xc2, 0x97, 0x90, 0x00,
    0xc2, 0x97, 0x91, 0x00,
    0xc2, 0x97, 0x92, 0x00,
    0xc2, 0x97, 0x93, 0x00,
    0xc2, 0x99, 0xa0, 0x00,
    0xc2, 0x99, 0xa1, 0x00,
    0xc2, 0x99, 0xa2, 0x00,
    0xc2, 0x99, 0xa3, 0x00,
    0xc2, 0x99, 0xa4, 0x00,
    0xc2, 0x99, 0xa5, 0x00,
    0xc2, 0x99, 0xa6, 0x00,
    0xc2, 0x99, 0xa7, 0x00,
    0xc2, 0x98, 0x85, 0x00,
    0xc2, 0x98, 0x86, 0x00,
    0xc2, 0x9a, 0xaa, 0x00,
    0xc2, 0x9a, 0xab, 0x00,
    0xc2, 0x9f, 0x90, 0x00
#if 0
    00f 7
    2190
    2191
    2192
    2193
    2206
    2207
    2211
    221a
    221e
    222b
    222e
    2234
    2236
    2237
    2295
    2296
    2297
    2298
    2299
    229a
    229b
    229c
    229d
    25d 0
    25d 1
    25d 2
    25d 3
    2660
    2661
    2662
    2663
    2664
    2665
    2666
    2667
    2605
    2606
    26aa
    26ab
    27d 0
    1d 6c3 ... 1d 6e1
#endif
};


XSSymbolPalette::XSSymbolPalette() :
    numStatic(sizeof(XSStaticSymbols) / 4),
    numTotal(numStatic),
    isUsed(new bool[numTotal]),
    symbols(new char[numTotal * 4]),
    m_lastReservedIndex(-1)
{
    memcpy(symbols, XSStaticSymbols, sizeof(XSStaticSymbols));
    for (unsigned int i = 0; i < numTotal; ++i) {
        isUsed[i] = false;
    }
}

XSSymbolPalette::XSSymbolPalette(XSSymbolPalette const &rhs) :
    numStatic(rhs.numStatic),
    numTotal(rhs.numTotal),
    isUsed(new bool[numTotal]),
    symbols(new char[numTotal * 4]),
    m_lastReservedIndex(rhs.m_lastReservedIndex)
{
    memcpy(symbols, rhs.symbols, numTotal * 4);
    memcpy(isUsed, rhs.isUsed, numTotal * sizeof(bool));
}

XSSymbolPalette::~XSSymbolPalette()
{
    delete[] isUsed;
    delete[] symbols;
}

char const *XSSymbolPalette::SymbolAtIndex(unsigned int i)
{
    assert(i < numTotal);
    // printf("SymbolAtIndex %d is %p %s\n", i, symbols+i*4, symbols+i*4);
    return symbols + i * 4;
}

char *XSSymbolPalette::EditSymbolAtIndex(unsigned int i)
{
    assert(i < numTotal);
    return symbols + i * 4;
}

char const *XSSymbolPalette::ReserveNextSymbol()
{
    for (unsigned int index = m_lastReservedIndex + 1; index < numTotal; ++index) {
        if (!isUsed[index]) {
            m_lastReservedIndex = index;
            return SymbolAtIndex(index);
        }
    }
    for (int index = 0; index <= m_lastReservedIndex; ++index) {
        if (!isUsed[index]) {
            m_lastReservedIndex = index;
            return SymbolAtIndex(index);
        }
    }
    return NULL;
}

char const *XSSymbolPalette::ReserveSymbol(unsigned int index)
{
    assert(index < numTotal);
    isUsed[index] = true;
    m_lastReservedIndex = index;
    return SymbolAtIndex(index);
}

void XSSymbolPalette::FreeSymbol(char const *symbol)
{
    unsigned int index = (symbol - symbols) / 4;

    assert(index < numTotal);
    isUsed[index] = false;
}

unsigned int XSSymbolPalette::AddSymbol(char const *symbol)
{
    // printf("AddSymbol: len %d: %s\n", strlen(symbol), symbol);
    for (unsigned int index = 0; index < numTotal; ++index) {
        if (strcmp(symbol, SymbolAtIndex(index)) == 0) {
            return index;
        }
    }

    char *newSymbols = new char [(numTotal + 1) * 4];
    memcpy(newSymbols, symbols, numTotal * 4);
    ++numTotal;
    strncpy(EditSymbolAtIndex(numTotal - 1), symbol, 4);
    return numTotal - 1;
}
