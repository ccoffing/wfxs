newlines = lf
input_tab_size = 4
output_tab_size = 4
utf8_bom = remove
utf8_force = true
pp_indent = remove
indent_columns = output_tab_size
indent_continue = 0
indent_with_tabs = 0
indent_align_string = false
indent_brace = 0
indent_braces = false
indent_namespace = false
indent_extern = false
indent_class = true
indent_ctor_init_leading = 2
indent_ctor_init = 0
indent_else_if = false
indent_var_def_cont = false
indent_switch_case = 0
indent_label = 1
indent_access_spec = -4
sp_arith = add
sp_assign = add
sp_assign_default = add
sp_bool = add
sp_after_operator = remove
sp_after_operator_sym = remove
sp_compare = add
sp_inside_paren = remove
sp_paren_paren = remove
sp_paren_brace = add
sp_fparen_brace = add
sp_before_ptr_star = add
sp_before_unnamed_ptr_star = add
sp_between_ptr_star = remove
sp_after_ptr_star = remove
sp_before_byref = add
sp_after_byref = remove
sp_before_sparen = force
sp_after_sparen = force
sp_sparen_brace = force
sp_after_comma = add
sp_before_comma = remove
sp_after_cast = remove
sp_sizeof_paren = remove
sp_inside_braces = add
sp_inside_braces_enum = add
sp_inside_braces_struct = add
sp_return_paren = force
sp_func_def_paren = remove
sp_func_call_paren = remove
sp_func_proto_paren = remove
sp_before_dc = remove
sp_after_dc = remove
sp_not = remove
sp_inv = remove
sp_addr = remove
sp_deref = remove
sp_sign = remove
sp_incdec = remove
sp_cond_colon = force
sp_cond_question = force
sp_cmt_cpp_start = add
sp_after_new = force
nl_func_type_name = remove
nl_func_scope_name = remove
nl_func_proto_type_name = remove
nl_func_paren = remove
nl_func_def_paren = remove
nl_func_decl_start = remove
nl_func_def_start = remove
nl_func_var_def_blk = 1
nl_func_decl_end = remove
nl_func_def_end = remove
nl_fdef_brace = add
nl_end_of_file = force
nl_end_of_file_min = 1
# Normally would like to enforce 2, but this looks strange in many places
# such as just before #endif, or before closing } of a class.
#nl_after_func_body = 2
nl_after_func_proto = 1
# Normally would like to enforce 2 to separate members from data in a class,
# but this interacts poorly with preprocessor directives.
#nl_after_func_proto_group = 2
nl_before_access_spec = 2
nl_after_access_spec = 1
nl_after_return = false
nl_before_case = false
nl_after_case = false
nl_after_semicolon = true
nl_else_if = remove
eat_blanks_before_close_brace = false
sp_try_brace = add
sp_catch_paren = add
sp_brace_catch = add
sp_catch_brace = add
sp_brace_else = add
sp_else_brace = add

## K&R braces
nl_namespace_brace = remove
nl_brace_catch = remove
nl_brace_else = remove
nl_brace_while = remove
nl_catch_brace = remove
nl_class_brace = remove
nl_do_brace = remove
nl_else_brace = remove
nl_enum_brace = remove
nl_fcall_brace = remove
nl_for_brace = remove
nl_if_brace = remove
nl_struct_brace = remove
nl_switch_brace = remove
nl_try_brace = remove
nl_union_brace = remove
nl_while_brace = remove

## or each brace on its own line
#nl_namespace_brace = force
#nl_brace_catch = force
#nl_brace_else = force
#nl_brace_while = remove
#nl_catch_brace = force
#nl_class_brace = force
#nl_do_brace = force
#nl_else_brace = force
#nl_enum_brace = force
#nl_fcall_brace = force
#nl_for_brace = force
#nl_if_brace = force
#nl_struct_brace = force
#nl_switch_brace = force
#nl_try_brace = force
#nl_union_brace = force
#nl_while_brace = force

indent_class_colon = true
nl_class_colon = remove
pos_class_colon = trail

indent_constr_colon = true
nl_constr_colon = force
pos_constr_colon = trail

pos_constr_comma = trail

nl_class_init_args = force

nl_constr_init_args = force

pos_class_comma = trail

mod_paren_on_return = remove
# Prefer to unbrace single-line if, but this often triggers gcc's "ambiguous else" warning
mod_full_brace_if = ignore
mod_full_brace_for = force
mod_full_brace_do = force
mod_full_brace_while = force
mod_full_brace_nl = 3
mod_sort_include = true
mod_remove_empty_return = true

# TODO
align_keep_tabs = false
align_with_tabs = false
align_on_tabstop = false
align_enum_equ_span = 4
# align_nl_cont = true

#align_var_def_span = 2
#align_var_def_inline = false
#align_var_def_colon = true
#align_var_def_star_style = 0

# align_assign_span = 1
#align_var_struct_thresh = 1
#align_var_struct_gap = 1
align_struct_init_span = 0
align_right_cmt_span = 3
# align_pp_define_span = 8;
# align_pp_define_gap = 4;
# cmt_star_cont = false

## Line up indentations logically,
#indent_func_call_param = false
#indent_func_def_param = false
#indent_func_proto_param = false
#indent_func_class_param = false
#align_func_params = true

## ...or double-indent as vim does by default.
indent_func_call_param = true
indent_func_def_param = true
indent_func_proto_param = true
indent_func_class_param = true
align_func_params = false
indent_func_param_double = true
